package models

import (
	"os"
	"image/png"
	"github.com/harrydb/go/img/grayscale"
	"net/http"
	"io"
	"time"
	"path/filepath"
	"errors"
	"fmt"
	"math/rand"
	"strings"
	"github.com/astaxie/beego"
	"log"
)

type TileManager struct {
	X      string
	Y      string
	Z      string
	Server string
	GS     bool
}

//create grayScale image version
func grayScale(filename string) string {

	//read file
	infile, err := os.Open(filename)
	if err != nil {
		panic(err.Error())
	}
	defer infile.Close()

	//decode PNG
	src, err := png.Decode(infile)
	if err != nil {
		//if we cannot decode it - use default version
		return filename
	}

	//convert
	gray := grayscale.Convert(src, grayscale.ToGrayLuminance)

	//get name for converted file
	outFileName := filename[:len(filename) - 4] + ".gs.png"

	if _, err := os.Stat(outFileName); err == nil {
		//if file exist - return it now
		return outFileName
	}

	//save converted file
	outfile, err := os.Create(outFileName)
	if err != nil {
		panic(err.Error())
	}
	defer outfile.Close()
	png.Encode(outfile, gray)

	return outFileName
}

//download file
func downloadFile(fileName string, url string) (error) {

	//get url file
	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if (resp.StatusCode != 200) {
		return errors.New("error status code")
	}

	//create output file
	out, err := os.Create(fileName)
	if err != nil {
		panic(err.Error())
	}
	defer out.Close()

	//write content to output file
	io.Copy(out, resp.Body)

	return nil
}

// NewTaskManager returns an empty TaskManager.
func NewTileManager() *TileManager {
	return &TileManager{}
}

//get file from cache or download (and convert to GS)
func (tm *TileManager) getTileUrl() (string, error) {

	var url string

	config := GetConfig()

	for _, serverItem := range config.Servers {
		if (serverItem.Alias == tm.Server) {

			url = serverItem.Url

			if (serverItem.Subdomains != nil) {
				subdomain := serverItem.Subdomains[rand.Intn(len(serverItem.Subdomains))]
				url = strings.Replace(url, "{s}", subdomain, -1)
			}

			url = strings.Replace(url, "{x}", tm.X, -1)
			url = strings.Replace(url, "{y}", tm.Y, -1)
			url = strings.Replace(url, "{z}", tm.Z, -1)

			break;
		}
	}

	if (len(url) == 0) {
		return "", errors.New("Server [" + tm.Server + "] not configured")
	}

	if (beego.AppConfig.String("runmode") == "dev") {
		fmt.Println(url)
	}

	return url, nil
}

//get file from cache or download (and convert to GS)
func (tm *TileManager) Get() (string, error) {

	config := GetConfig()

	//make path
	dir, err := filepath.Abs(filepath.Dir(os.Args[0]))
	if err != nil {
		log.Fatal(err)
	}
	path := filepath.Join(dir, "cache", tm.Server, tm.X, tm.Y)
	os.MkdirAll(path, os.ModePerm)
	fileName := filepath.Join(path, tm.Z)

	toDownload := false
	if file, err := os.Stat(fileName); err != nil {
		//if file not exist
		toDownload = true;
	} else {
		//if file older then ttl duration
		if (time.Now().Add(0 - config.TtlDuration).After(file.ModTime())) {
			toDownload = true;
		}
	}

	//if we should download file
	if (toDownload) {

		url, err := tm.getTileUrl()
		if (err != nil) {
			return "", err;
		}

		tries := 0 //tries to get file
		for {
			tries++
			err := downloadFile(fileName, url)
			//if file get success - exit try loop
			if (err == nil) {
				break
			}

			//If cannot get file in 5 tries - return error
			if (err != nil && (tries >= config.Tries)) {
				return "", err
			}
		}
	}

	//if we gonna get grayScale tile - convert it
	if (tm.GS) {
		gsFileName := grayScale(fileName)
		return gsFileName, nil
	}

	return fileName, nil
}

func init() {

	config := GetConfig()

	if (config.ClearOldCache){
		//Start clear old cache tile files ticker
		ticker := time.NewTicker(time.Minute * 30)
		go func() {
			for t := range ticker.C {
				fmt.Println("Tick at", t)

				visit := func(path string, f os.FileInfo, err error) error {

					if file, err := os.Stat(path); err == nil {
						//if file older then ttl duration
						if (time.Now().Add(0 - config.TtlDuration).After(file.ModTime())) {
							//delete file/path
							os.RemoveAll(path)
						}
					}

					return nil
				}

				dir, err := filepath.Abs(filepath.Dir(os.Args[0]))
				if err != nil {
					log.Fatal(err)
				}
				path := filepath.Join(dir, "cache")
				err = filepath.Walk(path, visit)
				if (err != nil) {
					fmt.Printf("filepath.Walk() returned %v\n", err)
				}
			}
		}()
	}
	
}